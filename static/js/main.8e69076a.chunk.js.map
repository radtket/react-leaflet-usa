{"version":3,"sources":["utils.js","components/Legend.jsx","components/HighlightedGeoJson.jsx","App.js","reportWebVitals.js","index.js"],"names":["getColor","d","style","feature","weight","opacity","color","dashArray","fillOpacity","fillColor","properties","density","Legend","map","useLeaflet","useEffect","legend","L","control","position","onAdd","div","DomUtil","create","grades","labels","from","to","i","length","push","innerHTML","join","addTo","HighlightedGeoJson","info","_div","update","props","name","highlightFeature","e","layer","target","setStyle","Browser","ie","opera","edge","bringToFront","geojson","resetHighlight","resetStyle","zoomToFeature","fitBounds","getBounds","geoJson","statesData","onEachFeature","on","mouseover","mouseout","click","App","_jsxs","Map","center","height","zoom","children","_jsx","TileLayer","attribution","url","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"04uFACO,MAAMA,EAAWC,GAClBA,EAAI,IACC,UAELA,EAAI,IACC,UAELA,EAAI,IACC,UAELA,EAAI,IACC,UAELA,EAAI,GACC,UAELA,EAAI,GACC,UAELA,EAAI,GACC,UAEF,UAGIC,EAAQC,IACZ,CACLC,OAAQ,EACRC,QAAS,EACTC,MAAO,QACPC,UAAW,IACXC,YAAa,GACbC,UAAWT,EAASG,GAAWA,EAAQO,WAAWC,WCMvCC,MAlCAA,KACb,MAAM,IAAEC,GAAQC,cA8BhB,OA5BAC,qBAAU,KACR,MAAMC,EAASC,IAAEC,QAAQ,CAAEC,SAAU,gBAErCH,EAAOI,MAAQ,KACb,MAAMC,EAAMJ,IAAEK,QAAQC,OAAO,MAAO,eAC9BC,EAAS,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KACxCC,EAAS,GACf,IAAIC,EACAC,EAEJ,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IACjCF,EAAOF,EAAOI,GACdD,EAAKH,EAAOI,EAAI,GAEhBH,EAAOK,KACL,wBAAwB9B,EAAS0B,EAAO,YAAYA,IAClDC,EAAK,UAAUA,IAAO,OAM5B,OADAN,EAAIU,UAAYN,EAAOO,KAAK,QACrBX,CAAG,EAGZL,EAAOiB,MAAMpB,EAAI,GAChB,CAACA,IAEG,IAAI,E,QCsCEqB,MApEYA,KACzB,MAAM,IAAErB,GAAQC,cAgEhB,OA9DAC,qBAAU,KAER,MAAMoB,EAAOlB,IAAEC,UAEfiB,EAAKf,MAAQ,KACXe,EAAKC,KAAOnB,IAAEK,QAAQC,OAAO,MAAO,QACpCY,EAAKE,SACEF,EAAKC,MAGdD,EAAKE,OAASC,IACZH,EAAKC,KAAKL,UAAY,kCACpBO,EACI,MAAMA,EAAMC,iBAAiBD,EAAM3B,kCACnC,qBACJ,EAGJwB,EAAKF,MAAMpB,GAEX,MAAM2B,EAAmBC,IACvB,MAAMC,EAAQD,EAAEE,OAEhBD,EAAME,SAAS,CACbxC,OAAQ,EACRE,MAAO,OACPC,UAAW,GACXC,YAAa,KAGVS,IAAE4B,QAAQC,IAAO7B,IAAE4B,QAAQE,OAAU9B,IAAE4B,QAAQG,MAClDN,EAAMO,eAGRd,EAAKE,OAAOK,EAAMvC,QAAQO,WAAW,EAGvC,IAAIwC,EAEJ,MAAMC,EAAiBV,IACrBS,EAAQE,WAAWX,EAAEE,QACrBR,EAAKE,QAAQ,EAGTgB,EAAgBZ,IACpB5B,EAAIyC,UAAUb,EAAEE,OAAOY,YAAY,EAWrCL,EAAUjC,IAAEuC,QAAQC,EAAY,CAC9BvD,QACAwD,cAVoBA,CAACvD,EAASuC,KAC9BA,EAAMiB,GAAG,CACPC,UAAWpB,EACXqB,SAAUV,EACVW,MAAOT,GACP,IAMDpB,MAAMpB,EAAI,GACZ,CAACA,IAEG,IAAI,E,OCrDEkD,MAbHA,IAERC,eAACC,IAAG,CAACC,OAAQ,CAAC,MAAO,IAAKhE,MAAO,CAAEiE,OAAQ,SAAWC,KAAM,EAAEC,SAAA,CAC5DC,cAACC,IAAS,CACRC,YAAY,yEACZC,IAAI,uDAENH,cAACpC,EAAkB,IACnBoC,cAAC1D,EAAM,OCDE8D,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,E,MCFFS,IAASC,OACPf,cAACgB,IAAMC,WAAU,CAAAlB,SACfC,cAACP,EAAG,MAENyB,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.8e69076a.chunk.js","sourcesContent":["// get color depending on population density value\nexport const getColor = d => {\n  if (d > 1000) {\n    return \"#800026\";\n  }\n  if (d > 500) {\n    return \"#BD0026\";\n  }\n  if (d > 200) {\n    return \"#E31A1C\";\n  }\n  if (d > 100) {\n    return \"#FC4E2A\";\n  }\n  if (d > 50) {\n    return \"#FD8D3C\";\n  }\n  if (d > 20) {\n    return \"#FEB24C\";\n  }\n  if (d > 10) {\n    return \"#FED976\";\n  }\n  return \"#FFEDA0\";\n};\n\nexport const style = feature => {\n  return {\n    weight: 2,\n    opacity: 1,\n    color: \"white\",\n    dashArray: \"3\",\n    fillOpacity: 0.7,\n    fillColor: getColor(feature && feature.properties.density),\n  };\n};\n","import { useLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport { useEffect } from \"react\";\nimport { getColor } from \"../utils\";\n\nconst Legend = () => {\n  const { map } = useLeaflet();\n\n  useEffect(() => {\n    const legend = L.control({ position: \"bottomright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      const grades = [0, 10, 20, 50, 100, 200, 500, 1000];\n      const labels = [];\n      let from;\n      let to;\n\n      for (let i = 0; i < grades.length; i++) {\n        from = grades[i];\n        to = grades[i + 1];\n\n        labels.push(\n          `<i style=\"background:${getColor(from + 1)}\"></i> ${from}${\n            to ? `&ndash;${to}` : \"+\"\n          }`\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    legend.addTo(map);\n  }, [map]);\n\n  return null;\n};\n\nexport default Legend;\n","import { useEffect } from \"react\";\nimport { useLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport statesData from \"../data/states.json\";\nimport { style } from \"../utils\";\n\nconst HighlightedGeoJson = () => {\n  const { map } = useLeaflet();\n\n  useEffect(() => {\n    // control that shows state info on hover\n    const info = L.control();\n\n    info.onAdd = () => {\n      info._div = L.DomUtil.create(\"div\", \"info\");\n      info.update();\n      return info._div;\n    };\n\n    info.update = props => {\n      info._div.innerHTML = `<h4>US Population Density</h4>${\n        props\n          ? `<b>${props.name}</b><br />${props.density} people / mi<sup>2</sup>`\n          : \"Hover over a state\"\n      }`;\n    };\n\n    info.addTo(map);\n\n    const highlightFeature = e => {\n      const layer = e.target;\n\n      layer.setStyle({\n        weight: 5,\n        color: \"#666\",\n        dashArray: \"\",\n        fillOpacity: 0.7,\n      });\n\n      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n        layer.bringToFront();\n      }\n\n      info.update(layer.feature.properties);\n    };\n\n    let geojson;\n\n    const resetHighlight = e => {\n      geojson.resetStyle(e.target);\n      info.update();\n    };\n\n    const zoomToFeature = e => {\n      map.fitBounds(e.target.getBounds());\n    };\n\n    const onEachFeature = (feature, layer) => {\n      layer.on({\n        mouseover: highlightFeature,\n        mouseout: resetHighlight,\n        click: zoomToFeature,\n      });\n    };\n\n    geojson = L.geoJson(statesData, {\n      style,\n      onEachFeature,\n    }).addTo(map);\n  }, [map]);\n\n  return null;\n};\n\nexport default HighlightedGeoJson;\n","import React from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport Legend from \"./components/Legend\";\nimport HighlightedGeoJson from \"./components/HighlightedGeoJson\";\n\nconst App = () => {\n  return (\n    <Map center={[37.8, -96]} style={{ height: \"100vh\" }} zoom={4}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <HighlightedGeoJson />\n      <Legend />\n    </Map>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}